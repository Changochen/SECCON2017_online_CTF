#!/usr/bin/python3

import socket
import hashlib

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers.algorithms import AES

def encrypt(message, key, iv):    
    backend = default_backend()
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    encryptor = cipher.encryptor()
    ct = encryptor.update(message) + encryptor.finalize()
    return ct

def decrypt(message, key, iv):    
    backend = default_backend()
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    decryptor = cipher.decryptor()
    pt = decryptor.update(message) + decryptor.finalize()
    return pt


iv = b"0"*16 #os.urandom(16)

private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())
public_key = private_key.public_key()
serialiszed_public_key = public_key.public_bytes(serialization.Encoding.DER, serialization.PublicFormat.SubjectPublicKeyInfo)

sent_public_keys = [0,0]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("localhost", 8000))

s.recv(len("[dev0 to dev1]:"))
data = s.recv(120)
sent_public_keys[0] = serialization.load_der_public_key(data, backend=default_backend())
s.send(serialiszed_public_key)
data = s.recv(len("\n[dev1 to dev0]: OK\n"))

data = s.recv(len("[dev1 to dev0]:"))
data = s.recv(120)
sent_public_keys[1] = serialization.load_der_public_key(data, backend=default_backend())
s.send(serialiszed_public_key)
s.recv(len("\n[dev0 to dev1]: OK\n"))

data = s.recv(len("[KBKDF: SHA256, Encryption: AES]\n"))
exchanged_keys = [private_key.exchange(ec.ECDH(), sent_public_keys[x^1]) for x in range(2)]
keys = [hashlib.sha256(x).digest() for x in exchanged_keys]

data = s.recv(len("[dev0 to dev1]:"))
data = s.recv(256)

pt = decrypt(data, keys[1], iv)

ct = encrypt(pt, keys[0], iv)
s.send(ct)

data = s.recv(len("\n[dev1 to dev0]: OK\n"))

data = s.recv(len("[dev1 to dev0]:"))

data = s.recv(256)
pt = decrypt(data, keys[0], iv)
print(pt)










